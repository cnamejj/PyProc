#!/usr/bin/env python
"""Monitor classes of memory use and note significant changes
"""

import sys
import time
import ProcHandlers
import ProcFieldConstants
import ProcDataConstants

if sys.platform == "darwin":
    print "MacOS doesn't have a '/proc' filesystem, quitting."
    sys.exit(0)
    
PFC = ProcFieldConstants
PDC = ProcDataConstants

HANDLER = ProcHandlers.GET_HANDLER("meminfo")

PAUSE_LEN = 5
DIFF_THRESHOLD = 20.0

IS_UP = "UP"
IS_DOWN = "DO"

DATA_FORMAT = "{seq}. {now} {key} {dir} {delta} {pc:.2f}% {prev} {units}\
 -> {curr} {units}"

# ---

def get_meminfo_counts(handler):
    """Run through /proc/meminfo and collect all the counters"""

    __counters = dict()
    __units = dict()

    __active = handler()
    for __hilit in __active:
        __key = __active.field[PFC.F_CATEGORY]
        __counters[__key] = __active.field[PFC.F_SIZE]
        __units[__key] = __active.field[PFC.F_UNITS]

    return(__counters, __units)

# ---

def calc_meminfo_diffs(before, curr):
    """Compute the change in counters between two sets"""

    __diffs = dict()

    for __key in curr:
        try:
            __diffs[__key] = curr[__key] - before[__key]
        except KeyError:
            __diffs[__key] = curr[__key]

    return __diffs

# ---

PREV = dict()
DONE = False
SEQ = 0

try:
    while not DONE:
        SEQ += 1
        NOW = time.strftime("%y-%m-%d %H:%M:%S")
        SEEN, UNITS = get_meminfo_counts(HANDLER)
        DELTA = calc_meminfo_diffs(PREV, SEEN)

        for key in SEEN:
            try:
                if PREV[key] == 0 and SEEN[key] == 0:
                    pc_diff = 0
                elif PREV[key] == 0:
                    pc_diff = PDC.INF
                else:
                    pc_diff = (DELTA[key] * 100.0) / PREV[key]
            except KeyError:
                PREV[key] = 0
                if SEEN[key] == 0:
                    pc_diff = 0
                else:
                    pc_diff = PDC.INF

            if abs(pc_diff) > DIFF_THRESHOLD:
                if pc_diff < 0:
                    DIRECTION = IS_DOWN
                else:
                    DIRECTION = IS_UP
                print DATA_FORMAT.format(seq=SEQ, key=key, pc=pc_diff,
                        dir=DIRECTION, delta=DELTA[key], now=NOW,
                        units=UNITS[key], prev=PREV[key], curr=SEEN[key])

        PREV = SEEN
        time.sleep(PAUSE_LEN)

except KeyboardInterrupt:
    print "Stopping..."
