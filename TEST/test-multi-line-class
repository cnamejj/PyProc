#!/usr/bin/env python

import ProcHandlers

PH = ProcHandlers
PBR = PH.PBR
PFC = PH.PFC

PREFIX = PBR.PREFIX_VAL
SUFFIX = PBR.SUFFIX_VAL
CONV = PBR.CONVERSION
NAME = PBR.FIELD_NAME
BEFORE = PBR.BEFORE_VAL

REGISTER_FILE = PBR.register_file
REGISTER_PARTIAL_FILE = PBR.register_partial_file

class ProcSelfSTATUS(PBR.TaggedMultiLineFile):
    """Parse contents of process specific 'status' file, ex: /proc/self/status"""

    def extra_init(self, *opts):
        self.minfields = 2
        
        PBR.add_parse_rule(self, { PREFIX: "Name:\t", NAME: PFC.F_PROG_NAME } )
        PBR.add_parse_rule(self, { PREFIX: "State:\t", NAME: PFC.F_RUNSTATUS } )
        PBR.add_parse_rule(self, { PREFIX: "Tgid:\t", NAME: PFC.F_THREAD_GID, CONV: long } )
        PBR.add_parse_rule(self, { PREFIX: "Pid:\t", NAME: PFC.F_GID, CONV: long } )
        PBR.add_parse_rule(self, { PREFIX: "PPid:\t", NAME: PFC.F_PPID, CONV: long } )
        PBR.add_parse_rule(self, { PREFIX: "TracerPid:\t", NAME: PFC.F_TRACER_PID, CONV: long } )
        PBR.add_parse_rule(self, { PREFIX: "Uid:\t", NAME: PFC.F_UID_SET } )
        PBR.add_parse_rule(self, { PREFIX: "Gid:\t", NAME: PFC.F_GID_SET } )
        PBR.add_parse_rule(self, { PREFIX: "FDSize:\t", NAME: PFC.F_FDSIZE, CONV: long } )
        PBR.add_parse_rule(self, { PREFIX: "Groups:\t", NAME: PFC.F_GROUPS } )
        PBR.add_parse_rule(self, { PREFIX: "VmPeak:\t", NAME: PFC.F_VM_PEAK, SUFFIX: " kB", CONV: long } )
        PBR.add_parse_rule(self, { PREFIX: "VmSize:\t", NAME: PFC.F_VM_SIZE, SUFFIX: " kB", CONV: long } )
        PBR.add_parse_rule(self, { PREFIX: "VmLck:\t", NAME: PFC.F_VM_LOCK, SUFFIX: " kB", CONV: long } )
        PBR.add_parse_rule(self, { PREFIX: "VmPin:\t", NAME: PFC.F_VM_PIN, SUFFIX: " kB", CONV: long } )
        PBR.add_parse_rule(self, { PREFIX: "VmHWM:\t", NAME: PFC.F_VM_HWM, SUFFIX: " kB", CONV: long } )
        PBR.add_parse_rule(self, { PREFIX: "VmRSS:\t", NAME: PFC.F_VM_RSS, SUFFIX: " kB", CONV: long } )
        PBR.add_parse_rule(self, { PREFIX: "VmData:\t", NAME: PFC.F_VM_DATA, SUFFIX: " kB", CONV: long } )
        PBR.add_parse_rule(self, { PREFIX: "VmStk:\t", NAME: PFC.F_VM_STACK, SUFFIX: " kB", CONV: long } )
        PBR.add_parse_rule(self, { PREFIX: "VmExe:\t", NAME: PFC.F_VM_EXE, SUFFIX: " kB", CONV: long } )
        PBR.add_parse_rule(self, { PREFIX: "VmLib:\t", NAME: PFC.F_VM_LIB, SUFFIX: " kB", CONV: long } )
        PBR.add_parse_rule(self, { PREFIX: "VmPTE:\t", NAME: PFC.F_VM_PTE, SUFFIX: " kB", CONV: long } )
        PBR.add_parse_rule(self, { PREFIX: "VmSwap:\t", NAME: PFC.F_VM_SWAP, SUFFIX: " kB", CONV: long } )
        PBR.add_parse_rule(self, { PREFIX: "Threads:\t", NAME: PFC.F_THREADS, CONV: long } )
        PBR.add_parse_rule(self, { PREFIX: "SigQ:\t", NAME: PFC.F_SIG_QUEUE } )
        PBR.add_parse_rule(self, { PREFIX: "SigPnd:\t", NAME: PFC.F_SIG_PEND } )
        PBR.add_parse_rule(self, { PREFIX: "ShdPnd:\t", NAME: PFC.F_SIG_SH_PEND } )
        PBR.add_parse_rule(self, { PREFIX: "SigBlk:\t", NAME: PFC.F_SIG_BLOCK } )
        PBR.add_parse_rule(self, { PREFIX: "SigIgn:\t", NAME: PFC.F_SIG_IGN } )
        PBR.add_parse_rule(self, { PREFIX: "SigCgt:\t", NAME: PFC.F_SIG_CAUGHT } )
        PBR.add_parse_rule(self, { PREFIX: "CapInh:\t", NAME: PFC.F_CAP_INHERIT } )
        PBR.add_parse_rule(self, { PREFIX: "CapPrm:\t", NAME: PFC.F_CAP_PERM } )
        PBR.add_parse_rule(self, { PREFIX: "CapEff:\t", NAME: PFC.F_CAP_EFF } )
        PBR.add_parse_rule(self, { PREFIX: "CapBnd:\t", NAME: PFC.F_CAP_BSET } )
        PBR.add_parse_rule(self, { PREFIX: "Cpus_allowed:\t", NAME: PFC.F_CPU_ALLOW_MASK } )
        PBR.add_parse_rule(self, { PREFIX: "Cpus_allowed_list:\t", NAME: PFC.F_CPU_ALLOW_LIST } )
        PBR.add_parse_rule(self, { PREFIX: "Mems_allowed:\t", NAME: PFC.F_MEM_ALLOW_MASK } )
        PBR.add_parse_rule(self, { PREFIX: "Mems_allowed_list:\t", NAME: PFC.F_MEM_ALLOW_LIST } )
        PBR.add_parse_rule(self, { PREFIX: "voluntary_ctxt_switches:\t", NAME: PFC.F_CSWITCH_VOL, CONV: long } )
        PBR.add_parse_rule(self, { PREFIX: "nonvoluntary_ctxt_switches:\t", NAME: PFC.F_CSWITCH_NONVOL, CONV: long } )

        self.add_eor_rule( "nonvoluntary_ctxt_switches", { BEFORE: ":" } )

        return


    def extra_next(self, sio):

        try:
            __split = self.field[PFC.F_UID_SET].split("\t")
            print "dbg:: Found {nn} uid values".format(nn=len(__split))
        except KeyError:
            print "dbg:: Err: No uid list"

        try:
            __split = self.field[PFC.F_GID_SET].split("\t")
            print "dbg:: Found {nn} gid values".format(nn=len(__split))
        except KeyError:
            print "dbg:: Err: No gid list"

        return self.field

REGISTER_FILE("/proc/self/status", ProcSelfSTATUS)
REGISTER_PARTIAL_FILE("status", ProcSelfSTATUS)

handler = PH.GET_HANDLER("/tmp/ps/status")

#act = handler("/tmp/ps/status")
#act = handler("/tmp/ps/short-status")
act = handler("/proc/self/status")
#act = handler()

for xx in act:
    print "- - -"
    for key in xx:
        print "{key}: '{val}' {vt}".format(key=key, val=str(xx[key]), vt=type(xx[key]).__name__)


