#!/usr/bin/env python
"""
Display memory use changes over time for a specific process.
"""

import sys
import time
import ProcHandlers
import ProcFieldConstants
import ProcessInfo

PFC = ProcFieldConstants
PIN = ProcessInfo

if sys.platform == "darwin":
    print "MacOS doesn't have a '/proc' filesystem, quitting."
    sys.exit(0)

# ---

NO_PATH = "[no-path]"
TOTALS = "[totals]"
IS_UP = "UP"
IS_DOWN = "DO"
OPT_ALL = "all"
OPT_NONE = "none"

ST_SCAN = 0
ST_IGN_LIST = 1
ST_SHOW_LIST = 2
ST_GET_PC = 3
ST_GET_ABS = 4
ST_GET_PAUSE = 5
ST_GET_PID = 6

SMAP_FILE_TEMPLATE = "/proc/{pid}/smaps"
KEY_TEMPLATE = "{low:x}-{high:x} {path}"
DISP_FORMAT = "{tstamp} {curr:7} {dir} {diff:7} {pc:6.1f}%\
 {low:7} {hi:7} {cat} {name:14}"

MSEG_HEADER = { True: " Memory-Segment", False: "" }
MSEG_BREAKOUT = { True: "w/ mem-segment breakouts", False: "" }

HEADER_FORMAT = "pid: #{pid}, cmd: {cmdline}\n\
pause: {plen} secs, thresholds: absolute {minabs}, percentage {pc}%\n\
display:{show} {breakout}\n\
watch:{output}\n\
\n\
Date     Time     Current DR   Delta %-Delta Minimum Maximum{mseg} Path Type\n\
-------- -------- ------- -- ------- ------- ------- ------- - - -"

SHOW_SYNTAX = "Syntax: {comm} -pid ### options...\n\
Options:\n\
    <+/-details>\n\
    <+/-totals>\n\
    <+/-ignore cat1 cat2 cat3 ...> | <+/-ignore all>\n\
    <+/-show cat1 cat2 cat3 ...> | <+/-show all>\n\
    <+/-percent threshold>\n\
    <+/-change threshold>\n\
    <+/-pause seconds>\n\
    <+/-memory-segments> | <+/-mseg>"

OP_PID = "-pid"
OP_TOTALS = "-totals"
OP_NO_TOTALS = "+totals"
OP_BREAKOUT = "-details"
OP_NO_BREAKOUT = "+details"
OP_IGNORE_SEGS = "-ignore"
OP_NO_IGNORE_SEGS = "+ignore"
OP_SHOW_SEGS = "-show"
OP_NO_SHOW_SEGS = "+show"
OP_PC_CHANGE = "-percent"
OP_ABS_CHANGE = "-change"
OP_PAUSE_LEN = "-pause"
OP_SPLIT_MSEG = "-memory-segments"
OP_NO_SPLIT_MSEG = "+memory-segments"
OP_SPLIT_MSEG2 = "-mseg"
OP_NO_SPLIT_MSEG2 = "+mseg"

OPT_STATE_MAP = {
        OP_IGNORE_SEGS: ST_IGN_LIST,
        OP_NO_IGNORE_SEGS: ST_SHOW_LIST,
        OP_SHOW_SEGS: ST_SHOW_LIST,
        OP_NO_SHOW_SEGS:  ST_IGN_LIST,
        OP_PC_CHANGE: ST_GET_PC,
        OP_ABS_CHANGE: ST_GET_ABS,
        OP_ABS_CHANGE: ST_GET_PID,
        OP_PAUSE_LEN: ST_GET_PAUSE }
# ---

HANDLER = ProcHandlers.GET_HANDLER("/proc/self/smaps")

PAUSE_LEN = 5
PC_THRESH = 10.0
ABS_THRESH = 1
DO_SHOW_DETAILS = True
DO_SHOW_TOTALS = True
DONE = False
SEQ = 0
PID = "self"
DO_SPLIT_MSEG = True
STAT = ST_GET_PID

# ---

COUNTER_LIST = (PFC.F_ANON_HUGE_PAGES, PFC.F_ANONYMOUS, PFC.F_LOCKED,
        PFC.F_PR_CLEAN, PFC.F_PR_DIRTY, PFC.F_PSS, PFC.F_REFERENCED,
        PFC.F_RSS_SIZE, PFC.F_SH_CLEAN, PFC.F_SH_DIRTY, PFC.F_SIZE,
        PFC.F_SWAP)

DISP_LIST = dict()

for __cn in COUNTER_LIST:
    DISP_LIST[__cn] = True

# ---

def get_current_smaps_counts(smap_path):
    """Pull memory segments counters for the indicated process"""

    __act = HANDLER(smap_path)
    __current = dict()

    __total = dict()

    for __hilit in __act:
        __fields = __act.field

        if __fields[PFC.F_PATH] == "":
            __path = NO_PATH
        else:
            __path = __fields[PFC.F_PATH]

        __counters = dict()
        
        for __cname in COUNTER_LIST:
            __counters[__cname] = __fields[__cname]
            try:
                __total[__cname] += __fields[__cname]
            except KeyError:
                __total[__cname] = __fields[__cname]

        if not DO_SPLIT_MSEG:
            __key = __path
            for __cname in __counters:
                try:
                    __counters[__cname] += __current[__key][__cname]
                except KeyError:
                    pass
        else:
            __key = KEY_TEMPLATE.format(low=__fields[PFC.F_START],
                    high=__fields[PFC.F_END], path=__path)

        __current[__key] = __counters

    if len(__current) > 0:
        __current[TOTALS] = __total

    return __current

# ---

def calc_smaps_count_diffs(current, previous):
    """Compute before/after deltas for a set of counters"""

    __diffs = dict()

    for __seg in current:
        __counters = dict()

        __cs = current[__seg]
        try:
            __ps = previous[__seg]
        except KeyError:
            __ps = dict()

        for __key in current[__seg]:
            try:
                __counters[__key] = __cs[__key] - __ps[__key]
            except KeyError:
                __counters[__key] = __cs[__key]

        __diffs[__seg] = __counters

    return __diffs

# ---

if len(sys.argv) <= 1:
    print SHOW_SYNTAX.format(comm=sys.argv[0])

else:

    for __opt in sys.argv[2:]:

        if __opt.startswith("-"):
            STAT = ST_SCAN

        if __opt == OP_TOTALS:
            DO_SHOW_TOTALS = True
            STAT = ST_SCAN

        elif __opt == OP_NO_TOTALS:
            DO_SHOW_TOTALS = False
            STAT = ST_SCAN

        elif __opt == OP_BREAKOUT:
            DO_SHOW_DETAILS = True
            STAT = ST_SCAN

        elif __opt == OP_NO_BREAKOUT:
            DO_SHOW_DETAILS = False
            STAT = ST_SCAN

        elif __opt == OP_SPLIT_MSEG or __opt == OP_SPLIT_MSEG2:
            DO_SPLIT_MSEG = True
            STAT = ST_SCAN

        elif __opt == OP_NO_SPLIT_MSEG or __opt == OP_NO_SPLIT_MSEG2:
            DO_SPLIT_MSEG = False
            STAT = ST_SCAN

        elif STAT == ST_GET_PID:
            STAT = ST_SCAN
            PID = __opt

        elif STAT == ST_GET_PC:
            STAT = ST_SCAN
            PC_THRESH = float(__opt)

        elif STAT == ST_GET_ABS:
            STAT = ST_SCAN
            ABS_THRESH = abs(long(__opt))
            if ABS_THRESH < 1:
                ABS_THRESH = 1

        elif STAT == ST_GET_PAUSE:
            STAT = ST_SCAN
            PAUSE_LEN = abs(long(__opt))
            if PAUSE_LEN < 1:
                PAUSE_LEN = 1

        elif STAT == ST_IGN_LIST:
            if __opt == OPT_ALL:
                for __cn in DISP_LIST:
                    DISP_LIST[__cn] = False
            elif __opt == OPT_NONE:
                for __cn in DISP_LIST:
                    DISP_LIST[__cn] = True
            else:
                DISP_LIST[__opt] = False

        elif STAT == ST_SHOW_LIST:
            if __opt == OPT_ALL:
                for __cn in DISP_LIST:
                    DISP_LIST[__cn] = True
            elif __opt == OPT_NONE:
                for __cn in DISP_LIST:
                    DISP_LIST[__cn] = False
            else:
                DISP_LIST[__opt] = True

        else:
            try:
                STAT = OPT_STATE_MAP[__opt]
            except KeyError:
                STAT = ST_SCAN
                print "Warn: Ignoring unrecognized option '{opt}'".format(
                        opt=__opt)

    OUTLIST = ""
    for __cn in DISP_LIST:
        if DISP_LIST[__cn]:
            OUTLIST = "{curr} {next}".format(curr=OUTLIST, next=__cn)

    if OUTLIST == "":
        DONE = True
        print "Err: No fields selected for display."
    elif not DO_SHOW_TOTALS and not DO_SHOW_DETAILS:
        DONE = True
        print "Err: Display of details info and summary totals both disabled."
    else:
        if DO_SHOW_TOTALS:
            SHOW = " totals"
        else:
            SHOW = ""
        if DO_SHOW_DETAILS:
            SHOW = "{show} details".format(show=SHOW)

        print HEADER_FORMAT.format(pid=PID, plen=PAUSE_LEN, minabs=ABS_THRESH,
            cmdline=PIN.pid_to_cmdline(PID), pc=PC_THRESH, show=SHOW,
            output=OUTLIST, mseg=MSEG_HEADER[DO_SPLIT_MSEG],
            breakout=MSEG_BREAKOUT[DO_SPLIT_MSEG])

    PATH = SMAP_FILE_TEMPLATE.format(pid=PID)
    CURR = get_current_smaps_counts(PATH)
    MINVAL = dict()
    MAXVAL = dict()

    try:

        while not DONE:
            SEQ += 1
            NOW = time.strftime("%y-%m-%d %H:%M:%S")
            PREV = CURR
            CURR = get_current_smaps_counts(PATH)

            if len(CURR) == 0:
                print "Process {pid} not running".format(pid=PID)
                DONE = True
                continue

            DELTA = calc_smaps_count_diffs(CURR, PREV)

            for dcat in DELTA:

                if dcat == TOTALS and not DO_SHOW_TOTALS:
                    continue
                if dcat != TOTALS and not DO_SHOW_DETAILS:
                    continue

                delta = DELTA[dcat]
                cset = CURR[dcat]

                try:
                    minset = MINVAL[dcat]
                    maxset = MAXVAL[dcat]
                except KeyError:
                    MINVAL[dcat] = dict()
                    MAXVAL[dcat] = dict()
                    minset = MINVAL[dcat]
                    maxset = MAXVAL[dcat]

                for key in delta:

                    try:
                        if cset[key] < minset[key]:
                            min_seen = cset[key]
                            minset[key] = cset[key]
                        else:
                            min_seen = minset[key]
                    except KeyError:
                        min_seen = cset[key]
                        minset[key] = cset[key]

                    try:
                        if cset[key] > maxset[key]:
                            max_seen = cset[key]
                            maxset[key] = cset[key]
                        else:
                            max_seen = maxset[key]
                    except KeyError:
                        max_seen = cset[key]
                        maxset[key] = cset[key]

                    if not DISP_LIST[key] or abs(delta[key]) < ABS_THRESH:
                        continue

                    try:
                        DPC = (delta[key] * 100.0) / cset[key]
                    except ZeroDivisionError:
                        DPC = 100.0
 
                    if delta[key] > 0:
                        desc = IS_UP
                    else:
                        desc = IS_DOWN

                    if abs(DPC) >= PC_THRESH:
                        print DISP_FORMAT.format(tstamp=NOW, curr=cset[key],
                                name=key, diff=delta[key], dir=desc, pc=DPC,
                                low=min_seen, hi=max_seen, cat=dcat)

            time.sleep(PAUSE_LEN)

    except KeyboardInterrupt:
        print "Stopping..."
