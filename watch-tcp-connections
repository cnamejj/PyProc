#!/usr/bin/env python
"""Display socket connections as they area created.

Check the contents of /proc/net files tcp and tcp6 for active TCP connections
and print new ones as they are found.  When the user ends the program by
entering ^C the code will print a summary of the sockets that were found as it
was written and the number of times each was seen.  
"""

import time
import sys

import ProcHandlers
import ProcFieldConstants
import CachedDNS
import ProcessInfo

GetProcFileHandler = ProcHandlers.GetProcFileHandler

if sys.platform == "darwin":
    print "MacOS doesn't have a '/proc' filesystem, quitting."
    sys.exit(0)
    
psi = ProcHandlers
pfc = ProcFieldConstants

iplookup = CachedDNS.CachedDNS()
procinfo = ProcessInfo.ProcessInfo()

NO_SESSION_PID = procinfo.get_PID_err_value()
NO_PROCESS_SUMMARY = procinfo.get_process_summary_err_value()

session_pair = set()
seen_freq = dict()

done = 0

handle_tcp = GetProcFileHandler("/proc/net/tcp")
handle_tcp6 = GetProcFileHandler("/proc/net/tcp6")

try:
    while done != 1:

        new_sessions = set()
        socklist = handle_tcp()

        for proc_rec in socklist:
            orig_ip = socklist.field[pfc.F_ORIG_IP]
            orig_hexip = socklist.field[pfc.F_ORIG_HEXIP]
            orig_port = socklist.field[pfc.F_ORIG_PORT]
            dest_ip = socklist.field[pfc.F_DEST_IP]
            dest_hexip = socklist.field[pfc.F_DEST_HEXIP]
            dest_port = socklist.field[pfc.F_DEST_PORT]
            sock_stat = socklist.field[pfc.F_STATE]

#            print "--> ", dest_ip, dest_port, sock_stat
            if orig_hexip != "" and dest_hexip != "" and sock_stat != "LISTEN":
                key = "{0:s}:{1:d}:{2:s}:{3:d}".format( orig_ip, orig_port, dest_ip, dest_port)
                if key not in session_pair:
                    session_pair.add(key)
                    new_sessions.add( (orig_port, dest_ip, dest_port))
                    if not seen_freq.has_key(dest_ip):
                        seen_freq[dest_ip] = 1
                    else:
                        seen_freq[dest_ip] += 1

        del socklist

        socklist = handle_tcp6()

        for proc_rec in socklist:
            orig_ip = socklist.field[pfc.F_ORIG_IP]
            orig_hexip = socklist.field[pfc.F_ORIG_HEXIP]
            orig_port = socklist.field[pfc.F_ORIG_PORT]
            dest_ip = socklist.field[pfc.F_DEST_IP]
            dest_hexip = socklist.field[pfc.F_DEST_HEXIP]
            dest_port = socklist.field[pfc.F_DEST_PORT]
            sock_stat = socklist.field[pfc.F_STATE]

#            print "--> ", dest_ip, dest_port, sock_stat
            if orig_hexip != "" and dest_hexip != "" and sock_stat != "LISTEN":
                key = "{0:s}:{1:d}:{2:s}:{3:d}".format( orig_ip, orig_port, dest_ip, dest_port)
                if key not in session_pair:
                    session_pair.add(key)
                    new_sessions.add( (orig_port, dest_ip, dest_port))
                    if not seen_freq.has_key(dest_ip):
                        seen_freq[dest_ip] = 1
                    else:
                        seen_freq[dest_ip] += 1

        del socklist


        for orig_port, dest_ip, dest_port in new_sessions:

            ip2host = iplookup.get_cached_hostname(dest_ip)

            session_pid = procinfo.map_connection_to_PID(orig_port, dest_ip, dest_port, "tcp")

            proc_summary = procinfo.map_PID_to_process_summary(session_pid)

            print "{0:s}:{1:d} cmd: {3:s} host: {2:s}".format( dest_ip, dest_port, ip2host, proc_summary)

        if len( new_sessions) > 0:
            print "{time} : Found {new_sessions}".format(time=time.ctime(), new_sessions=len(new_sessions))
        time.sleep(5)


except KeyboardInterrupt:
    print "Stopping..."

for ip in seen_freq:

    ip2host = iplookup.get_cache_entry( ip) 

    print "{0:d} {1:s} host: {2:s}".format( seen_freq[ip], ip, ip2host)

sys.stderr.flush()
sys.stdout.flush()
