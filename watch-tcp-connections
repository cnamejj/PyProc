#!/usr/bin/env python
"""Display socket connections as they area created.

Check the contents of /proc/net files tcp and tcp6 for active TCP connections
and print new ones as they are found.  When the user ends the program by
entering ^C the code will print a summary of the sockets that were found as it
was written and the number of times each was seen.  
"""

import time
import sys
import operator

import ProcHandlers
import ProcFieldConstants
import CachedDNS
import ProcessInfo

GET_HANDLER = ProcHandlers.GET_HANDLER

if sys.platform == "darwin":
    print "MacOS doesn't have a '/proc' filesystem, quitting."
    sys.exit(0)
    
PFC = ProcFieldConstants

IPLOOKUP = CachedDNS.LookupIP()
PSI = ProcessInfo

NO_SESSION_PID = PSI.NO_CONN_PID
NO_PROCESS_SUMMARY = PSI.NO_PROCESS_SUMMARY

SESSION_PAIR = set()
SEEN_FREQ = dict()

DONE = False

HLIST = (GET_HANDLER("/proc/net/tcp6"), GET_HANDLER("/proc/net/tcp"))

try:
    while not DONE:

        NEW_SESSIONS = set()

        INODE2PID = ProcessInfo.socket_inode_to_pid_map()

        for handler in HLIST:
            SOCKLIST = handler()

            for proc_rec in SOCKLIST:
                orig_ip = SOCKLIST.field[PFC.F_ORIG_IP]
                orig_hexip = SOCKLIST.field[PFC.F_ORIG_HEXIP]
                orig_port = SOCKLIST.field[PFC.F_ORIG_PORT]
                dest_ip = SOCKLIST.field[PFC.F_DEST_IP]
                dest_hexip = SOCKLIST.field[PFC.F_DEST_HEXIP]
                dest_port = SOCKLIST.field[PFC.F_DEST_PORT]
                sock_stat = SOCKLIST.field[PFC.F_STATE]
                inode = SOCKLIST.field[PFC.F_INODE]

#                print "--> ", dest_ip, dest_port, sock_stat
                if orig_hexip != "" and dest_hexip != "" and \
                        sock_stat != "LISTEN":
                    key = "{0:s}:{1:d}:{2:s}:{3:d}".format( orig_ip, orig_port,
                            dest_ip, dest_port)
                    if key not in SESSION_PAIR:
                        SESSION_PAIR.add(key)
                        NEW_SESSIONS.add((orig_port, dest_ip, dest_port,
                                inode))
                        if not SEEN_FREQ.has_key(dest_ip):
                            SEEN_FREQ[dest_ip] = 1
                        else:
                            SEEN_FREQ[dest_ip] += 1

            del SOCKLIST

        for orig_port, dest_ip, dest_port, inode in NEW_SESSIONS:

            ip2host = IPLOOKUP.get_cached_hostname(dest_ip)

            try:
                session_pid = INODE2PID[inode]
                proc_summary, proc_rc = PSI.pid_to_proc_summ(session_pid)
            except KeyError:
                session_pid = "N/A"
                proc_summary = "N/A"

            print "{0:s}:{1:d} cmd: {3:s} host: {2:s}".format( dest_ip,
                    dest_port, ip2host, proc_summary)

        if len( NEW_SESSIONS) > 0:
            print "{time} : Found {new}".format(time=time.ctime(),
                    new=len(NEW_SESSIONS))
        time.sleep(5)

except KeyboardInterrupt:
    print "Stopping..."


ORDERED_FREQ = sorted(SEEN_FREQ.items(), key=operator.itemgetter(1))

for ip, freq in ORDERED_FREQ:

    ip2host = IPLOOKUP.get_cache_entry(ip)

    print "{0:d} {1:s} host: {2:s}".format( freq, ip, ip2host)

sys.stderr.flush()
sys.stdout.flush()
